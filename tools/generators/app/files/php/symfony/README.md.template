# <%= className %>

A Symfony 7.0 application generated by @terrible-lizard/generators.

## Description

<%= className %> is a PHP web application built with:
- **Framework:** Symfony 7.0
- **ORM:** Doctrine ORM with PostgreSQL
- **Cache:** Redis
- **Web Server:** Nginx + PHP-FPM
- **Docker:** Multi-stage Dockerfile with development and production modes
- **Generated by:** @terrible-lizard/generators

## Getting Started

### Prerequisites

- Docker and Docker Compose
- (Optional) PHP 8.2+ and Composer for local development

### Development with Docker

```bash
# Start all services (recommended)
nx serve <%= projectName %>

# Or manually with docker-compose
docker-compose up --build

# Run in background
docker-compose up -d --build
```

The application will be available at:
- **Application:** http://localhost:8003
- **Health Check:** http://localhost:8003/api/health
- **Web Profiler:** http://localhost:8003/_profiler (dev mode)
- **Database:** PostgreSQL on port 5435
- **Redis:** Redis on port 6382
- **PhpMyAdmin:** http://localhost:8081 (run with `--profile admin`)

### Available Endpoints

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/` | Welcome message |
| GET | `/api/health` | Health check with database status |
| GET | `/api/items` | List all items with pagination |
| POST | `/api/items` | Create a new item |
| GET | `/api/items/{id}` | Get specific item |
| PUT/PATCH | `/api/items/{id}` | Update item |
| DELETE | `/api/items/{id}` | Delete item |

### Development Commands

```bash
# Build the application
nx build <%= projectName %>

# Run tests
nx test <%= projectName %>

# Run linting
nx lint <%= projectName %>

# Fix linting issues
nx lint:fix <%= projectName %>

# Install dependencies
nx install <%= projectName %>
```

### Docker Commands

```bash
# Build Docker image
nx docker-build <%= projectName %>

# Execute commands inside container
docker-compose exec app bash
docker-compose exec app composer install
docker-compose exec app php bin/console doctrine:migrations:migrate
```

### Database Management

```bash
# Run migrations
docker-compose exec app php bin/console doctrine:migrations:migrate

# Create a new migration
docker-compose exec app php bin/console make:migration

# Generate entities
docker-compose exec app php bin/console make:entity

# Clear cache
docker-compose exec app php bin/console cache:clear
```

## Project Structure

```
<%= projectRoot %>/
├── config/
│   ├── packages/          # Package configurations
│   ├── bundles.php        # Bundle registration
│   ├── routes.yaml        # Route definitions
│   └── services.yaml      # Service definitions
├── public/
│   └── index.php          # Application entry point
├── src/
│   ├── Controller/        # Controllers
│   ├── Entity/           # Doctrine entities
│   └── Kernel.php        # Application kernel
├── tests/                # PHPUnit tests
├── docker/               # Docker configurations
├── .env                  # Environment variables
├── composer.json         # PHP dependencies
├── Dockerfile            # Docker image definition
└── docker-compose.yml    # Docker services
```

## Environment Variables

Key environment variables in `.env`:

```bash
APP_ENV=dev                    # Application environment
APP_DEBUG=true                 # Debug mode
DATABASE_URL=postgresql://...  # Database connection
REDIS_URL=redis://...          # Redis connection
```

## Testing

Run the test suite:

```bash
# Inside Docker container
docker-compose exec app composer test

# With coverage
docker-compose exec app composer test:coverage
```

## Production Deployment

Build production image:

```bash
docker build --target production -t <%= projectName %>:latest .
```

The production build:
- Optimizes Composer dependencies
- Clears and warms Symfony cache
- Uses optimized PHP configuration
- Runs as non-root user for security

## Troubleshooting

### Common Issues

1. **Port conflicts**: Ensure ports 8003, 5435, 6382, 8081 are available
2. **Permission issues**: Run `docker-compose down && docker-compose up --build`
3. **Database connection**: Check if PostgreSQL container is healthy
4. **Cache issues**: Clear Symfony cache with `php bin/console cache:clear`

### Logs

```bash
# View application logs
docker-compose logs app

# View specific service logs
docker-compose logs db
docker-compose logs redis

# Follow logs in real-time
docker-compose logs -f app
```
