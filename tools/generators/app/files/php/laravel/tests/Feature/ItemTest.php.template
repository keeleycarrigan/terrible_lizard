<?php

namespace Tests\Feature;

use App\Models\Item;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ItemTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Test creating a new item.
     */
    public function test_can_create_item(): void
    {
        $itemData = [
            'name' => 'Test Item',
            'description' => 'This is a test item',
            'active' => true,
        ];

        $response = $this->postJson('/api/items', $itemData);

        $response->assertStatus(201)
                 ->assertJson($itemData);

        $this->assertDatabaseHas('items', $itemData);
    }

    /**
     * Test retrieving all items.
     */
    public function test_can_list_items(): void
    {
        Item::factory()->count(3)->create();

        $response = $this->get('/api/items');

        $response->assertStatus(200)
                 ->assertJsonStructure([
                     'items' => [
                         '*' => ['id', 'name', 'description', 'active', 'created_at', 'updated_at']
                     ],
                     'pagination' => ['page', 'limit', 'total', 'pages', 'has_more']
                 ]);
    }

    /**
     * Test retrieving a specific item.
     */
    public function test_can_show_item(): void
    {
        $item = Item::factory()->create();

        $response = $this->get("/api/items/{$item->id}");

        $response->assertStatus(200)
                 ->assertJson([
                     'id' => $item->id,
                     'name' => $item->name,
                     'description' => $item->description,
                     'active' => $item->active,
                 ]);
    }

    /**
     * Test updating an item.
     */
    public function test_can_update_item(): void
    {
        $item = Item::factory()->create();
        $updateData = [
            'name' => 'Updated Item Name',
            'description' => 'Updated description',
        ];

        $response = $this->putJson("/api/items/{$item->id}", $updateData);

        $response->assertStatus(200)
                 ->assertJson($updateData);

        $this->assertDatabaseHas('items', array_merge(['id' => $item->id], $updateData));
    }

    /**
     * Test deleting an item.
     */
    public function test_can_delete_item(): void
    {
        $item = Item::factory()->create();

        $response = $this->delete("/api/items/{$item->id}");

        $response->assertStatus(200)
                 ->assertJson(['message' => 'Item deleted successfully']);

        $this->assertDatabaseMissing('items', ['id' => $item->id]);
    }

    /**
     * Test validation when creating an item.
     */
    public function test_item_creation_validation(): void
    {
        $response = $this->postJson('/api/items', []);

        $response->assertStatus(422)
                 ->assertJsonValidationErrors(['name']);
    }

    /**
     * Test 404 when item not found.
     */
    public function test_returns_404_when_item_not_found(): void
    {
        $response = $this->get('/api/items/999');

        $response->assertStatus(404)
                 ->assertJson(['message' => 'Item not found']);
    }
}
