<?php

namespace App\Http\Controllers;

use App\Models\Item;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Validation\ValidationException;

class ItemController extends Controller
{
    /**
     * Display a listing of items with pagination
     */
    public function index(Request $request): JsonResponse
    {
        $perPage = min($request->get('limit', 20), 100); // Cap at 100 items per page
        $page = max($request->get('page', 1), 1);

        $query = Item::query();

        // Add search functionality
        if ($search = $request->get('search')) {
            $query->where(function ($q) use ($search) {
                $q->where('name', 'ilike', "%{$search}%")
                  ->orWhere('description', 'ilike', "%{$search}%");
            });
        }

        // Add status filter
        if ($request->has('active')) {
            $query->where('active', filter_var($request->get('active'), FILTER_VALIDATE_BOOLEAN));
        }

        $items = $query->orderBy('created_at', 'desc')
                      ->paginate($perPage, ['*'], 'page', $page);

        return response()->json([
            'items' => $items->items(),
            'pagination' => [
                'page' => $items->currentPage(),
                'limit' => $items->perPage(),
                'total' => $items->total(),
                'pages' => $items->lastPage(),
                'has_more' => $items->hasMorePages(),
            ],
        ]);
    }

    /**
     * Store a newly created item
     */
    public function store(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                'name' => 'required|string|max:255|unique:items,name',
                'description' => 'nullable|string|max:1000',
                'active' => 'boolean',
            ]);

            $item = Item::create([
                'name' => $validated['name'],
                'description' => $validated['description'] ?? null,
                'active' => $validated['active'] ?? true,
            ]);

            return response()->json($item, Response::HTTP_CREATED);

        } catch (ValidationException $e) {
            return response()->json([
                'message' => 'Validation failed',
                'errors' => $e->errors(),
            ], Response::HTTP_UNPROCESSABLE_ENTITY);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to create item',
                'error' => $e->getMessage(),
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Display the specified item
     */
    public function show(int $id): JsonResponse
    {
        try {
            $item = Item::findOrFail($id);
            return response()->json($item);
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Item not found',
            ], Response::HTTP_NOT_FOUND);
        }
    }

    /**
     * Update the specified item
     */
    public function update(Request $request, int $id): JsonResponse
    {
        try {
            $item = Item::findOrFail($id);

            $validated = $request->validate([
                'name' => 'sometimes|required|string|max:255|unique:items,name,' . $id,
                'description' => 'nullable|string|max:1000',
                'active' => 'boolean',
            ]);

            $item->update($validated);

            return response()->json($item);

        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Item not found',
            ], Response::HTTP_NOT_FOUND);
        } catch (ValidationException $e) {
            return response()->json([
                'message' => 'Validation failed',
                'errors' => $e->errors(),
            ], Response::HTTP_UNPROCESSABLE_ENTITY);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to update item',
                'error' => $e->getMessage(),
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove the specified item
     */
    public function destroy(int $id): JsonResponse
    {
        try {
            $item = Item::findOrFail($id);
            $item->delete();

            return response()->json([
                'message' => 'Item deleted successfully',
            ]);

        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'message' => 'Item not found',
            ], Response::HTTP_NOT_FOUND);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to delete item',
                'error' => $e->getMessage(),
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
