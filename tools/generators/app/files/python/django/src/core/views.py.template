"""Core application views."""

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
from django.core.paginator import Paginator
import json

from .models import ExampleModel


@require_http_methods(["GET"])
def api_status(request):
    """API status endpoint."""
    return JsonResponse({
        "status": "healthy",
        "service": "<%= projectName %>",
        "version": "0.1.0",
        "django_version": "5.0"
    })


@require_http_methods(["GET", "POST"])
@csrf_exempt
def example_items_api(request):
    """API endpoint for example items."""

    if request.method == "GET":
        # Get query parameters
        page = int(request.GET.get('page', 1))
        per_page = int(request.GET.get('per_page', 10))
        is_active = request.GET.get('is_active')

        # Build queryset
        queryset = ExampleModel.objects.all()
        if is_active is not None:
            queryset = queryset.filter(is_active=is_active.lower() == 'true')

        # Paginate
        paginator = Paginator(queryset, per_page)
        page_obj = paginator.get_page(page)

        # Serialize data
        items = []
        for item in page_obj:
            items.append({
                'id': item.id,
                'name': item.name,
                'description': item.description,
                'is_active': item.is_active,
                'created_at': item.created_at.isoformat(),
                'updated_at': item.updated_at.isoformat(),
            })

        return JsonResponse({
            'items': items,
            'pagination': {
                'page': page,
                'per_page': per_page,
                'total_pages': paginator.num_pages,
                'total_items': paginator.count,
                'has_next': page_obj.has_next(),
                'has_previous': page_obj.has_previous(),
            }
        })

    elif request.method == "POST":
        try:
            data = json.loads(request.body)
            item = ExampleModel.objects.create(
                name=data.get('name', ''),
                description=data.get('description', ''),
                is_active=data.get('is_active', True)
            )

            return JsonResponse({
                'id': item.id,
                'name': item.name,
                'description': item.description,
                'is_active': item.is_active,
                'created_at': item.created_at.isoformat(),
                'updated_at': item.updated_at.isoformat(),
            }, status=201)

        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)


class ExampleItemListView(ListView):
    """Class-based view for listing example items."""

    model = ExampleModel
    template_name = 'core/example_list.html'
    context_object_name = 'items'
    paginate_by = 10

    def get_queryset(self):
        """Filter queryset based on query parameters."""
        queryset = super().get_queryset()
        is_active = self.request.GET.get('is_active')

        if is_active is not None:
            queryset = queryset.filter(is_active=is_active.lower() == 'true')

        return queryset
