[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "<%= projectName %>"
version = "0.1.0"
description = "Flask application: <%= projectName %>"
authors = ["Your Organization <dev@yourorg.com>"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^<%= pythonVersion || '3.11' %>"
flask = "^3.0.0"
python-dotenv = "^1.0.0"
flask-cors = "^4.0.0"
gunicorn = "^21.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-flask = "^1.3.0"
ruff = "^0.1"
mypy = "^1.0"
black = "^23.0"

[tool.ruff]
extend = "../../../pyproject.toml"
src = ["src"]

[tool.ruff.lint]
# Flask-specific linting rules
extend-ignore = ["D100", "D104"]  # Allow missing docstrings in some cases

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=85"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
