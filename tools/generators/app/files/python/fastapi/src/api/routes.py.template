"""
API Routes

FastAPI router with all application endpoints.
"""

from datetime import datetime
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession

from ..core.config import get_settings
from ..core.database import get_db
from ..core.models import Item
from .schemas import (
    ErrorResponse,
    HealthResponse,
    ItemCreate,
    ItemListResponse,
    ItemResponse,
    ItemUpdate,
)

# Create API router
api_router = APIRouter()

# Get settings
settings = get_settings()


@api_router.get(
    "/health",
    response_model=HealthResponse,
    summary="Health Check",
    description="Check API health and return status information",
)
async def health_check():
    """Health check endpoint."""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.utcnow(),
        version=settings.VERSION,
    )


@api_router.get(
    "/items",
    response_model=ItemListResponse,
    summary="List Items",
    description="Get a paginated list of items",
)
async def list_items(
    db: AsyncSession = Depends(get_db),
    limit: int = Query(default=20, ge=1, le=100, description="Number of items to return"),
    offset: int = Query(default=0, ge=0, description="Number of items to skip"),
    active_only: bool = Query(default=True, description="Only return active items"),
):
    """Get a list of items with pagination."""
    # Build query
    query = select(Item)
    if active_only:
        query = query.where(Item.is_active == True)

    # Get total count
    count_query = select(func.count(Item.id))
    if active_only:
        count_query = count_query.where(Item.is_active == True)

    total_result = await db.execute(count_query)
    total = total_result.scalar() or 0

    # Get items with pagination
    query = query.offset(offset).limit(limit).order_by(Item.created_at.desc())
    result = await db.execute(query)
    items = result.scalars().all()

    return ItemListResponse(
        items=[ItemResponse.model_validate(item) for item in items],
        total=total,
        limit=limit,
        offset=offset,
        has_more=offset + limit < total,
    )


@api_router.post(
    "/items",
    response_model=ItemResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create Item",
    description="Create a new item",
)
async def create_item(
    item_data: ItemCreate,
    db: AsyncSession = Depends(get_db),
):
    """Create a new item."""
    item = Item(**item_data.model_dump())
    db.add(item)
    await db.commit()
    await db.refresh(item)

    return ItemResponse.model_validate(item)


@api_router.get(
    "/items/{item_id}",
    response_model=ItemResponse,
    summary="Get Item",
    description="Get a single item by ID",
    responses={404: {"model": ErrorResponse}},
)
async def get_item(
    item_id: int,
    db: AsyncSession = Depends(get_db),
):
    """Get a single item by ID."""
    query = select(Item).where(Item.id == item_id)
    result = await db.execute(query)
    item = result.scalar_one_or_none()

    if not item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Item with ID {item_id} not found",
        )

    return ItemResponse.model_validate(item)


@api_router.put(
    "/items/{item_id}",
    response_model=ItemResponse,
    summary="Update Item",
    description="Update an existing item",
    responses={404: {"model": ErrorResponse}},
)
async def update_item(
    item_id: int,
    item_data: ItemUpdate,
    db: AsyncSession = Depends(get_db),
):
    """Update an existing item."""
    query = select(Item).where(Item.id == item_id)
    result = await db.execute(query)
    item = result.scalar_one_or_none()

    if not item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Item with ID {item_id} not found",
        )

    # Update fields that were provided
    update_data = item_data.model_dump(exclude_unset=True)
    for field, value in update_data.items():
        setattr(item, field, value)

    await db.commit()
    await db.refresh(item)

    return ItemResponse.model_validate(item)


@api_router.delete(
    "/items/{item_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Delete Item",
    description="Delete an item",
    responses={404: {"model": ErrorResponse}},
)
async def delete_item(
    item_id: int,
    db: AsyncSession = Depends(get_db),
):
    """Delete an item."""
    query = select(Item).where(Item.id == item_id)
    result = await db.execute(query)
    item = result.scalar_one_or_none()

    if not item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Item with ID {item_id} not found",
        )

    await db.delete(item)
    await db.commit()
