"""
Test Configuration

Pytest fixtures and configuration for FastAPI testing.
"""

import asyncio
from typing import AsyncGenerator, Generator

import pytest
from fastapi import FastAPI
from fastapi.testclient import TestClient
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import (
    AsyncSession,
    async_sessionmaker,
    create_async_engine,
)

from src.api.routes import api_router
from src.core.database import Base, get_db
from src.core.models import Item


# Test database URL - use in-memory SQLite for speed
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"

# Create test engine
test_engine = create_async_engine(
    TEST_DATABASE_URL,
    echo=False,
    future=True,
)

# Create test session factory
TestAsyncSessionLocal = async_sessionmaker(
    test_engine,
    class_=AsyncSession,
    expire_on_commit=False,
)


async def get_test_db() -> AsyncGenerator[AsyncSession, None]:
    """Override database dependency for testing."""
    async with TestAsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()


def create_test_app() -> FastAPI:
    """Create a test FastAPI app without lifespan events."""
    app = FastAPI(
        title="<%= name %> Test App",
        description="Test app for <%= name %> testing",
        version="0.1.0",
    )

    # Include API routes
    app.include_router(api_router, prefix="/api")

    # Override database dependency
    app.dependency_overrides[get_db] = get_test_db

    return app


@pytest.fixture(scope="session")
def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        yield loop
    finally:
        loop.close()


@pytest.fixture(scope="session")
async def setup_database():
    """Set up test database."""
    # Create tables
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    yield

    # Drop tables
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


@pytest.fixture
async def db_session(setup_database) -> AsyncGenerator[AsyncSession, None]:
    """Create a database session for testing."""
    async with TestAsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.rollback()
            await session.close()

            # Clean up all data after each test for isolation
            async with TestAsyncSessionLocal() as cleanup_session:
                # Delete all items using proper SQLAlchemy syntax
                from src.core.models import Item
                from sqlalchemy import delete
                await cleanup_session.execute(delete(Item))
                await cleanup_session.commit()


@pytest.fixture
def client(setup_database) -> TestClient:
    """Create a test client with database override."""
    test_app = create_test_app()
    with TestClient(test_app) as test_client:
        yield test_client


@pytest.fixture
async def async_client(setup_database) -> AsyncGenerator[AsyncClient, None]:
    """Create an async test client."""
    test_app = create_test_app()
    async with AsyncClient(app=test_app, base_url="http://test") as client:
        yield client


@pytest.fixture
async def sample_item(db_session: AsyncSession) -> Item:
    """Create a sample item for testing."""
    item = Item(
        name="Test Item",
        description="A test item for testing purposes",
        price=1000,  # $10.00
        is_active=True,
    )
    db_session.add(item)
    await db_session.commit()
    await db_session.refresh(item)
    return item


@pytest.fixture
async def sample_items(db_session: AsyncSession) -> list[Item]:
    """Create multiple sample items for testing."""
    items = [
        Item(name=f"Item {i}", description=f"Description {i}", price=i * 100, is_active=True)
        for i in range(1, 6)
    ]
    db_session.add_all(items)
    await db_session.commit()

    # Refresh all items to get their IDs
    for item in items:
        await db_session.refresh(item)

    return items
